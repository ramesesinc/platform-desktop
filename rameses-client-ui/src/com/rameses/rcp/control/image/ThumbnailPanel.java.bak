/*
 * ThumbnailPanel.java
 *
 * Created on April 21, 2014, 11:29 AM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.rameses.rcp.control.image;

import com.rameses.util.Base64Cipher;
import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Insets;
import java.awt.LayoutManager;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.beans.Beans;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;

/**
 *
 * @author wflores
 */
public class ThumbnailPanel extends JPanel 
{
    private Dimension cellSize;
    private int cellSpacing;
    private int columnCount;
    private Color selectionBorderColor;
    private Border cellBorder;
    
    public ThumbnailPanel() {
        super.setLayout(new DefaultLayout()); 
        setBackground(Color.decode("#808080"));
        setBorder(BorderFactory.createEmptyBorder(5,5,5,5)); 
        selectionBorderColor = Color.decode("#505050"); 
        cellSize = getDefaultCellSize(); 
        cellSpacing = 5; 
        columnCount = 5; 
        
        if (Beans.isDesignTime()) {
            add(createDesignTimeImage("IMG-1"));
            add(createDesignTimeImage("IMG-2"));
            add(createDesignTimeImage("IMG-3"));
        }
    }
    
    // <editor-fold defaultstate="collapsed" desc=" Getters/Setters ">
        
    private ImageThumbnail createDesignTimeImage(String text) {
        ImageIcon icon = new ImageIcon(new byte[0]);
        ImageThumbnail img = new ImageThumbnail(new HashMap(), icon); 
        img.setBorder(BorderFactory.createLineBorder(Color.decode("#808080")));
        img.setText(text);
        return img; 
    }
    
    public void setLayout(LayoutManager layout) {}
    
    public int getCellSpacing() { return cellSpacing; } 
    public void setCellSpacing(int cellSpacing) {
        this.cellSpacing = cellSpacing;
    }
    
    public int getColumnCount() { return columnCount; } 
    public void setColumnCount(int columnCount) {
        this.columnCount = columnCount; 
    }

    protected Dimension getDefaultCellSize() {
        return new Dimension(35, 35);
    }
    
    public Dimension getCellSize() { return cellSize; } 
    public void setCellSize(Dimension cellSize) {
        this.cellSize = cellSize; 
    }
    
    public Color getSelectionBorderColor() { return selectionBorderColor; } 
    public void setSelectionBorderColor(Color selectionBorderColor) {
        this.selectionBorderColor = selectionBorderColor; 
    }
    
    public Border getCellBorder() { return cellBorder; } 
    public void setCellBorder(Border cellBorder) {
        this.cellBorder = cellBorder; 
    }
    
    private Dimension getPreferredCellSize() {
        Dimension size = getCellSize();
        if (size == null) size = getDefaultCellSize();
        
        return new Dimension(size.width, size.height); 
    }
    
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc=" helper methods ">
    
    private Base64Cipher base64;
    private Base64Cipher getBase64Cipher() {
        if (base64 == null) {
            base64 = new Base64Cipher(); 
        }
        return base64; 
    }
    
    protected void onselect(Object item) {
    }
    
    protected void onopen(Object item) {
    }
    
    protected void onrefresh() {
    }

    public Component moveNext() {
        if (!isEnabled()) return null;
        
        Component[] comps = getThumbnails();
        if (comps.length == 0) return null;
        
        int selIndex = getSelectedIndex();
        if (selIndex < 0) {
            ImageThumbnail imt = (ImageThumbnail)comps[0]; 
            setSelectedComponent(imt); 
            return imt;
            
        } else if (selIndex+1 >= 0 && selIndex+1 < comps.length){
            ImageThumbnail imt = (ImageThumbnail)comps[selIndex+1]; 
            setSelectedComponent(imt); 
            return imt;
            
        } else {
            return null; 
        }
    }
    
    public Component movePrevious() {
        if (!isEnabled()) return null;
        
        Component[] comps = getThumbnails();
        if (comps.length == 0) return null;
        
        int selIndex = getSelectedIndex();
        if (selIndex < 0) {
            ImageThumbnail imt = (ImageThumbnail)comps[0]; 
            setSelectedComponent(imt); 
            return imt;
            
        } else if (selIndex-1 >= 0 && selIndex-1 < comps.length){
            ImageThumbnail imt = (ImageThumbnail)comps[selIndex-1]; 
            setSelectedComponent(imt); 
            return imt;
            
        } else {
            return null; 
        }
    }
    
    public void refresh() {
        Component c = getSelectedComponent(); 
        if (!(c instanceof ImageThumbnail)) return;
        
        ImageThumbnail imt = (ImageThumbnail)c; 
        Map map = imt.getData();
        Object ocaption = map.get("caption");
        Object oimage = map.get("image");
        if (!(oimage instanceof byte[])) {
            oimage = new byte[0];
        } 
        imt.icon = new ImageIcon((byte[]) oimage); 
        imt.setToolTipText(ocaption == null? null: ocaption.toString()); 
        imt.repaint(); 
        onrefresh(); 
    }
    
    private ImageIcon resolveImage( Object value ) {
        if ( value instanceof Image ) {
            return new ImageIcon((Image) value); 
        } else if ( value instanceof byte[] ) {
            return new ImageIcon((byte[]) value);
        } else if ( value instanceof String && getBase64Cipher().isEncoded(value.toString()) ) {
            Object o = getBase64Cipher().decode(value.toString()); 
            return resolveImage( o ); 
        } else {
            return new ImageIcon(createEmptyImage(Color.decode("#a0a0a0"))); 
        }
    }
    
    private Image createEmptyImage( Color color ) { 
        int width=100,  height=100;
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB); 
        Graphics2D g = bi.createGraphics(); 
        g.setColor( color ); 
        g.fillRect(0, 0, width, height);
        g.dispose();
        return bi; 
    }
    
    public void add(Map map) {
        if (map == null) return;
        
        ImageIcon iicon = null;
        Object ocaption = map.get("caption");
        Object oimage = map.get("image");
        ImageIcon icon = resolveImage( oimage ); 
        ImageThumbnail img = new ImageThumbnail(map, icon); 
        if (ocaption != null) { 
            img.setToolTipText(ocaption.toString());
        } 
        add(img); 
    } 
        
    public Component[] getThumbnails() {
        List<Component> list = new ArrayList(); 
        Component[] comps = getComponents();
        for (int i=0; i<comps.length; i++) {
            Component c = comps[i];
            if (!c.isVisible()) continue;
            if (c instanceof ImageThumbnail) {
                list.add(c); 
            }
        } 
        return (Component[]) list.toArray(new Component[]{}); 
    }
    
    public int getSelectedIndex() {
        Component[] comps = getThumbnails();
        for (int i=0; i<comps.length; i++) {
            Component c = comps[i];
            ImageThumbnail im = (ImageThumbnail)c;
            if (im.isSelected()) return i;
        } 
        return -1;
    } 
    
    public Component getSelectedComponent() {
        int idx = getSelectedIndex();
        if (idx < 0) return null;
        
        return getComponent(idx); 
    }    
    
    public Object getSelectedItem() {
        int idx = getSelectedIndex();
        if (idx < 0) return null;
        
        ImageThumbnail im = (ImageThumbnail) getComponent(idx); 
        return im.getData();
    }
    
    public void selectFirstItem() {
        ImageThumbnail firstItem = null;
        Component[] comps = getComponents();
        for (int i=0; i<comps.length; i++) {
            Component c = comps[i];
            if (!c.isVisible()) continue;
            if (!(c instanceof ImageThumbnail)) continue;
            
            ImageThumbnail im = (ImageThumbnail)c;
            if(firstItem == null) firstItem = im;
            
            im.setSelected(false); 
            im.repaint(); 
        } 
        if (firstItem != null) {
            firstItem.setSelected(true);
            firstItem.repaint();
            fireOnSelect(firstItem.getData()); 
        }
    }    
    
    private void setSelectedComponent(ImageThumbnail image) {
        if (image != null) {
            image.setSelected(true);
            image.repaint();
        }
        
        ImageThumbnail firstItem = null;        
        Component[] comps = getComponents();
        for (int i=0; i<comps.length; i++) {
            Component c = comps[i];
            if (!c.isVisible()) continue;
            if (!(c instanceof ImageThumbnail)) continue;
            
            ImageThumbnail im = (ImageThumbnail)c;
            if (firstItem == null) {
                firstItem = im;
                if (image == null) {
                    firstItem.setSelected(true);
                    firstItem.repaint();
                }
            }

            if (image != null && image.equals(im)) {
                //do nothing 
            } else { 
                im.setSelected(false); 
                im.repaint();
            }
        }

        final ImageThumbnail sel = (image == null? firstItem: image);
        if (sel != null) fireOnSelect(sel.getData());
    } 
    
    private void fireOnSelect(final Object data) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                onselect(data); 
            }
        });
    }
    
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc=" DefaultLayout "> 
    
    private class DefaultLayout implements LayoutManager
    {
        public void addLayoutComponent(String name, Component comp) {}
        public void removeLayoutComponent(Component comp) {}

        public Dimension preferredLayoutSize(Container parent) {
            return getLayoutSize(parent);
        }

        public Dimension minimumLayoutSize(Container parent) {
            return getLayoutSize(parent);
        }
        
        private Component[] getVisibleComponents(Container parent) {
            List<Component> list = new ArrayList();
            Component[] comps = parent.getComponents(); 
            for (int i=0; i<comps.length; i++) {
                Component c = comps[i];
                if (c.isVisible()) list.add(c);
            }
            return (Component[]) list.toArray(new Component[]{}); 
        }
        
        private Dimension getLayoutSize(Container parent) {
            synchronized (parent.getTreeLock()) {
                int columnCount = getColumnCount();
                Insets margin = parent.getInsets(); 
                Dimension cellSize = getPreferredCellSize();                 
                Component[] comps = getVisibleComponents(parent); 
                if ( comps.length == 0 ) {
                    int w = cellSize.width + margin.left + margin.right; 
                    int h = cellSize.height + margin.top + margin.bottom; 
                    return new Dimension( w, h ); 
                } else if ( columnCount < 0 ) {
                    return getLayoutSizeFlow( parent, comps ); 
                }
                
                int cols = 0, rows = 0;
                if (comps.length <= columnCount) {
                    cols = comps.length;
                    rows = 1;
                } else {
                    cols = columnCount;
                    rows = comps.length / columnCount;
                    if (comps.length % columnCount > 0) rows += 1;
                } 

                int w = cols * cellSize.width;
                w += Math.max(cols-1,0) * getCellSpacing();
                
                int h = rows * cellSize.height;
                h += Math.max(rows-1, 0) * getCellSpacing(); 
                
                w += margin.left + margin.right;
                h += margin.top + margin.bottom;
                return new Dimension(w, h); 
            }
        }
        
        public void layoutContainer(Container parent) {
            synchronized (parent.getTreeLock()) {
                Component[] comps = getVisibleComponents(parent); 
                if ( comps.length == 0 ) return; 
                
                int columnCount = getColumnCount();
                if ( columnCount < 0 ) {
                    layoutFlow( parent, comps ); 
                    return; 
                }
                
                Dimension cellSize = getPreferredCellSize();  
                Insets margin = parent.getInsets(); 
                int pw = parent.getWidth();
                int ph = parent.getHeight();
                int x = margin.left;
                int y = margin.top;
                int w = pw - (margin.left + margin.right);
                int h = ph - (margin.top + margin.bottom);
                
                int cols = 0, rows = 0;
                if (comps.length <= columnCount) {
                    cols = comps.length;
                    rows = 1;
                } else {
                    cols = columnCount;
                    rows = comps.length / columnCount;
                    if (comps.length % columnCount > 0) rows += 1;
                }                 

                boolean has_components = false;                
                for (int r=0; r < rows; r++) {
                    if (r > 0) {
                        x = margin.left;
                        y += getCellSpacing();
                    }
                    
                    for (int i=0; i < cols; i++) {
                        int idx = (r*cols) + i;
                        if (idx >= comps.length) break; 
                        if (i > 0) x += getCellSpacing();
                        
                        Component c = comps[idx];
                        c.setBounds(x, y, cellSize.width, cellSize.height);
                        x += cellSize.width; 
                    }
                    y += cellSize.height;
                }
            }
        }
        
        Dimension getLayoutSizeFlow(Container parent, Component[] comps) {
            Dimension cellSize = getPreferredCellSize(); 
            Insets margin = parent.getInsets(); 
            int pw = parent.getWidth();
            int ph = parent.getHeight();
            int x = margin.left;
            int y = margin.top;
            int w = pw - (margin.left + margin.right);
            int h = ph - (margin.top + margin.bottom);
            
            int rightbound = pw - margin.right; 
            
            int nx=x, ny=y; 
            int spacing = Math.max(getCellSpacing(), 0);
            for (int i=0; i<comps.length; i++ ) {
                Component c = comps[i]; 
                int cx = nx + cellSize.width; 
                if ( nx == x ) {
                    cx = nx; 
                } else if ( cx > rightbound ) {
                    nx = x; 
                    ny += cellSize.height + spacing; 
                    cx = nx; 
                } else {
                    cx = nx; 
                }
                
                c.setBounds(cx, ny, cellSize.width, cellSize.height);
                nx += cellSize.width + spacing; 
            }
            ny += cellSize.height; 
            return new Dimension( pw, ny + margin.bottom );
        } 
        
        void layoutFlow(Container parent, Component[] comps) {
            Dimension cellSize = getPreferredCellSize(); 
            Insets margin = parent.getInsets(); 
            int pw = parent.getWidth();
            int ph = parent.getHeight();
            int x = margin.left;
            int y = margin.top;
            int w = pw - (margin.left + margin.right);
            int h = ph - (margin.top + margin.bottom);
            
            int rightbound = pw - margin.right; 
            
            int nx=x, ny=y; 
            int spacing = Math.max(getCellSpacing(), 0);
            for (int i=0; i<comps.length; i++ ) {
                Component c = comps[i]; 
                int cx = nx + cellSize.width; 
                if ( nx == x ) {
                    cx = nx; 
                } else if ( cx > rightbound ) {
                    nx = x; 
                    ny += cellSize.height + spacing; 
                    cx = nx; 
                } else {
                    cx = nx; 
                }
                
                c.setBounds(cx, ny, cellSize.width, cellSize.height);
                nx += cellSize.width + spacing; 
            }
        }
    }
    
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc=" ImageThumbnail "> 
       
    private class ImageThumbnail extends JLabel {
        ThumbnailPanel root = ThumbnailPanel.this;
        
        private Map data;
        private ImageIcon icon;
        private boolean selected;
        private boolean hover;
        
        ImageThumbnail(Map data, ImageIcon icon) {
            this.data = data;
            this.icon = icon;
            setPreferredSize(getPreferredCellSize()); 
            addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    if (!root.isEnabled()) return;
                    if (!SwingUtilities.isLeftMouseButton(e)) return;
                    if (e.getClickCount() == 2) {
                        fireOnOpen();
                    }
                }

                public void mousePressed(MouseEvent e) {
                    if (!root.isEnabled()) return;
                    if (!SwingUtilities.isLeftMouseButton(e)) return;
                    if (e.getClickCount() == 1) {
                        setSelectedComponent(ImageThumbnail.this); 
                    } 
                }

                public void mouseExited(MouseEvent e) {
                    hover = false;
                    ImageThumbnail.this.repaint();
                }

                public void mouseEntered(MouseEvent e) {
                    hover = true;
                    ImageThumbnail.this.repaint();
                }
            }); 
        }
        
        public Border getBorder() {
            if (getCellBorder() == null) {
                return super.getBorder(); 
            } else {
                return null; 
            }
        }
        
        public ImageIcon getOriginalIcon() { return icon; }
        public Map getData() { return data; } 
        
        public boolean isSelected() { return selected; } 
        public void setSelected(boolean selected) {
            this.selected = selected; 
            setFocusable(selected); 
        }
        
        private void fireOnOpen() {
            EventQueue.invokeLater(new Runnable() {
                public void run() {
                   onopen(getData());  
                }
            });
        }
        
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (icon == null) return;

            int width = getWidth();
            int height = getHeight();            
            Dimension newsize = getScaledSize(icon, new Dimension(width, height));    
            int nx = (width - newsize.width) / 2;
            int ny = (height - newsize.height) / 2;
            Graphics2D g2 = (Graphics2D)g.create();            
            g2.drawImage(icon.getImage(), nx, ny, newsize.width, newsize.height, null);
            g2.dispose();

            Border cellBorder = getCellBorder();
            if (cellBorder != null) {
                g2 = (Graphics2D)g.create(); 
                cellBorder.paintBorder(this, g2, 0, 0, width, height); 
                g2.dispose(); 
            } 
            
            if (root.isEnabled()) {
                if (hover) {
                    g2 = (Graphics2D)g.create(); 
                    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.20f)); 
                    g2.setColor(Color.BLUE); 
                    for (int i=0; i<3; i++) {
                        g2.drawRect(i, i, width-1-(i*2), height-1-(i*2));
                    }
                    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1f));
                    g2.drawRect(1, 1, width-2, height-2);                     
                    g2.dispose(); 
                }                
            } else {
                g2 = (Graphics2D)g.create(); 
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.70f)); 
                g2.setColor(Color.decode("#d5d5d5"));
                g2.fillRect(nx, ny, newsize.width, newsize.height);      
                g2.dispose(); 
            }
            
            if (isSelected()) {
                Color borderColor = getSelectionBorderColor();
                if (borderColor == null) borderColor = Color.GRAY;
                
                g2 = (Graphics2D)g.create(); 
                g2.setColor(borderColor);
                g2.drawRect(0, 0, width-1, height-1); 
                g2.dispose();
                return; 
            }
            
//            g2 = (Graphics2D)g.create(); 
//            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
//            Color oldColor = g2.getColor();
//            Composite oldComposite = g2.getComposite(); 
//            Composite newComposite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.45f);
//            g2.setComposite(newComposite); 
//            g2.setColor(Color.BLACK);
//            g2.fillRect(nx, ny, newsize.width, newsize.height);      
//            g2.dispose(); 
        }        
    } 
    
    private Dimension getScaledSize(ImageIcon icon, Dimension size) {
        if (icon == null) return null; 
        
        int iw = icon.getIconWidth(); 
        int ih = icon.getIconHeight(); 
        if (iw < size.width && ih < size.height) {
            return new Dimension(iw, ih); 
        }
        
        double scaleX = (double)size.width  / (double)iw;
        double scaleY = (double)size.height / (double)ih;
        double scale  = (scaleY > scaleX)? scaleX: scaleY;
        int nw = (int) (iw * scale);
        int nh = (int) (ih * scale);
        return new Dimension(nw, nh); 
    }    
    
    // </editor-fold>
    
}

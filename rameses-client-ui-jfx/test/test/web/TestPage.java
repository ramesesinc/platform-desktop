/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package test.web;

import java.awt.BorderLayout;
import java.io.InputStream;
import java.net.URL;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.concurrent.Worker;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.web.WebView;
import javax.swing.JOptionPane;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.events.Event;
import org.w3c.dom.events.EventListener;
import org.w3c.dom.events.EventTarget;

/**
 *
 * @author ramesesinc
 */
public class TestPage extends javax.swing.JPanel {

    private WebView wv; 
    private JFXPanel fxp;
    
    /**
     * Creates new form TestPage
     */
    public TestPage() {
        initComponents();
        
        fxp = new JFXPanel();
        pnlbody.setLayout(new BorderLayout()); 
        pnlbody.add( fxp ); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdload = new javax.swing.JButton();
        pnlbody = new javax.swing.JPanel();
        cmdloadContent = new javax.swing.JButton();

        cmdload.setText("Load URL");
        cmdload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlbodyLayout = new javax.swing.GroupLayout(pnlbody);
        pnlbody.setLayout(pnlbodyLayout);
        pnlbodyLayout.setHorizontalGroup(
            pnlbodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlbodyLayout.setVerticalGroup(
            pnlbodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 257, Short.MAX_VALUE)
        );

        cmdloadContent.setText("Load Content");
        cmdloadContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdloadContentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlbody, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmdload)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdloadContent)
                        .addGap(0, 200, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdload)
                    .addComponent(cmdloadContent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlbody, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmdloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdloadActionPerformed
        
        loadScene(); 
        
    }//GEN-LAST:event_cmdloadActionPerformed

    private void cmdloadContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdloadContentActionPerformed
        try {
            WebViewLoader wvl = new WebViewLoader();
            wvl.content = getContent("content"); 
            Platform.runLater( wvl ); 
        } 
        catch (Exception e) {
            throw new RuntimeException(e); 
        }
    }//GEN-LAST:event_cmdloadContentActionPerformed

    private void loadScene() {
        WebViewLoader wvl = new WebViewLoader();
        String sval = JOptionPane.showInputDialog(this, "Enter URL"); 
        if ( sval == null || sval.trim().length() == 0 ) return; 
        
        wvl.urlstr = sval;
        Platform.runLater( wvl ); 
    }
    
    private final static Object WEB_VIEW_LOCKED = new Object();
    private class WebViewLoader implements Runnable {
        String urlstr; 
        String content;
        
        public void run() {
            synchronized( WEB_VIEW_LOCKED ) {
                if ( wv == null ) {
                    wv = new WebView(); 
                    Worker worker = wv.getEngine().getLoadWorker(); 
                    worker.stateProperty().addListener(new ChangeListener() {
                        public void changed(ObservableValue ov, Object oldValue, Object newValue) {
                            System.out.println("working... "+ newValue.toString());
                            if ( newValue == Worker.State.SUCCEEDED ) {

                                Document doc = wv.getEngine().getDocument(); 
                                hookActionEvent( doc.getElementsByTagName("a")); 
                                hookActionEvent( doc.getElementsByTagName("button")); 
                                hookActionEvent( doc.getElementsByTagName("input")); 
                            }
                        }
                    });             

                    fxp.setScene(new Scene(wv)); 
                }
                
                if ( urlstr != null ) {
                    wv.getEngine().load( urlstr ); 
                }
                else if ( content != null ) {
                    wv.getEngine().loadContent( content ); 
                }
            }
        }
        
        private void hookActionEvent( NodeList nodes ) {
            if ( nodes == null ) return;
            
            for (int i=0; i<nodes.getLength(); i++) {
                Node node = nodes.item(i);
                if (!(node instanceof Element)) continue; 
                if (!(node instanceof EventTarget)) continue;
                
                Element elem = (Element) node; 
                String actionName = null;
                String stype = elem.getAttribute("type")+""; 
                if ( "A".equalsIgnoreCase( node.getNodeName()) ) {
                    actionName = elem.getAttribute("name");
                }
                else if ( "BUTTON".equalsIgnoreCase( node.getNodeName())) {
                    actionName = elem.getAttribute("name");
                }
                else if ( "INPUT".equalsIgnoreCase( node.getNodeName()) && "button".equalsIgnoreCase(stype)) {
                    actionName = elem.getAttribute("name"); 
                }
                
                if ( actionName != null && actionName.trim().length() > 0) {
                    EventTarget et = (EventTarget) node; 
                    et.addEventListener("click", new LinkActionHandler(), false);
                }
            }
            
        }
    }
    
    private class LinkActionHandler implements EventListener {
        public void handleEvent(Event e) {
            String domEventType = e.getType();
            if ( "click".equals(domEventType)) {
                e.stopPropagation(); 
                e.preventDefault();
                System.out.println("you click the link element");
                
                Node node = (Node) e.getTarget(); 
                NamedNodeMap attrs = node.getAttributes(); 
                for (int i=0; i<attrs.getLength(); i++) {
                    System.out.println("> "+ attrs.item(i).getNodeName() + ", "+ attrs.item(i).getNodeValue());
                }
                
            }
        }
    }
    
    private String getContent( String name ) throws Exception {
        InputStream inp = null; 
        StringBuilder buff = new StringBuilder();
        try {
            URL url = getClass().getResource( name ); 
            inp = url.openStream(); 
            
            int read = -1;
            byte[] bytes = new byte[250]; 
            while ((read = inp.read(bytes)) != -1) {
                buff.append( new String(bytes, 0, read)); 
            }
            return buff.toString(); 
        } finally {
            try { inp.close(); }catch(Throwable t){;}
        }
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdload;
    private javax.swing.JButton cmdloadContent;
    private javax.swing.JPanel pnlbody;
    // End of variables declaration//GEN-END:variables
}

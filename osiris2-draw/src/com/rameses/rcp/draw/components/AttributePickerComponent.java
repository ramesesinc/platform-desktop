/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rameses.rcp.draw.components;

import com.rameses.rcp.control.XComponentPanel;
import com.rameses.rcp.control.menu.VMenuBar;
import com.rameses.rcp.ui.annotations.ComponentBean;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import static com.rameses.rcp.draw.support.AttributeKeys.*;


@ComponentBean("com.rameses.rcp.draw.components.AttributePickerComponentModel")
public class AttributePickerComponent extends XComponentPanel {
    private String handler;
    private VMenuBar menuBar;
    protected AttributePickerModel model;
    protected com.rameses.rcp.common.ComponentBean bean;
    
    /**
     * Creates new form ColorPicker
     */
    public AttributePickerComponent() {
        initComponents();
    }
    
    public String getHandler(){
        if (handler == null){
            System.out.println("handler must be specified.");
        }
        return handler;
    }
    
    public void setHandler(String handler){
        this.handler = handler;
    }
    
    @Override
    protected void initComponentBean(com.rameses.rcp.common.ComponentBean bean) {
        this.bean = bean;
        model = (AttributePickerModel) getProperty(getHandler());
        bean.setProperty("model", model);
        loadMenuItems();
        loadColorButtons();
    }   
        
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        panel.setPreferredSize(new java.awt.Dimension(165, 60));
        panel.setLayout(new java.awt.GridLayout(3, 0));
        add(panel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables


    private void loadMenuItems(){
        menuBar = new VMenuBar();
        menuBar.setLayout(new GridLayout(0,1));
        add(menuBar, BorderLayout.SOUTH);
        
        String text = "More Colors...";
        if (model.getCaption() != null){
            text = "More " + model.getCaption() + "s ...";
        }
        menuBar.add(new MenuItem( text, "openColorChooser", bean, model));
        menuBar.add(createOutlineWeightMenuItems());
        menuBar.add(createOutlineDashMenuItems());
    }
    

    private AttributeMenu createOutlineWeightMenuItems(){
        AttributeMenu weight = new AttributeMenu("Weight", bean, model);
        double[] values = new double[]{
            0.25d, 0.5d, 0.75d, 1d, 2d, 3d, 5d, 8d, 10d
        };
        for (int i=0; i<values.length; i++){
            String text = String.format("%f pt", values[i]);
            AttributeMenuItem mi = new AttributeMenuItem(text, model, STROKE_WIDTH, values[i]);
            mi.setRenderer(new OutlineWeightMenuItemRenderer(mi));
            weight.add(mi);
        }
        weight.add(new MenuItem( "More Outlines...", "openOutlines", bean, model));
        return weight;
    }
    
    private AttributeMenu createOutlineDashMenuItems(){
        double[][] values = new double[][]{
            new double[]{0}, new double[]{1}, new double[]{2}, new double[]{3}, new double[]{5},
            new double[]{7}, new double[]{9,4,2,4}
        };
        
        AttributeMenu dashes = new AttributeMenu("Dashes", bean, model);
        for (int i=0; i<values.length; i++){
            AttributeMenuItem mi = new AttributeMenuItem(null, model, STROKE_DASHES, values[i]);
            mi.setRenderer(new OutlineDashMenuItemRenderer(mi));
            dashes.add(mi);
        }
        return dashes;
    }
        
    private void loadColorButtons(){
        panel.add(new ColorButton(model, Color.BLACK));
        panel.add(new ColorButton(model, Color.BLUE));
        panel.add(new ColorButton(model, Color.CYAN));
        panel.add(new ColorButton(model, Color.GRAY));
        panel.add(new ColorButton(model, Color.GREEN));
        panel.add(new ColorButton(model, Color.LIGHT_GRAY));
        panel.add(new ColorButton(model, Color.MAGENTA));
        panel.add(new ColorButton(model, Color.ORANGE));
        panel.add(new ColorButton(model, Color.PINK));
        panel.add(new ColorButton(model, Color.RED));
        panel.add(new ColorButton(model, Color.WHITE));
        panel.add(new ColorButton(model, Color.YELLOW));
    }
}





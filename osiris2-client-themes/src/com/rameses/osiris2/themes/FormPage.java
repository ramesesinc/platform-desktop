/*
 * FormPage.java
 *
 * Created on April 24, 2013, 12:44 PM
 */

package com.rameses.osiris2.themes;

import com.rameses.rcp.common.AbstractListDataProvider;
import com.rameses.rcp.control.XDropDownList;
import com.rameses.rcp.control.layout.LayoutComponent;
import com.rameses.rcp.swing.UIVisibility;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.LayoutManager;
import java.awt.LayoutManager2;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.text.html.HTMLEditorKit;

/**
 *
 * @author  wflores
 */
public class FormPage extends javax.swing.JPanel {
    
    private NoteRenderer renderer;
    
    public FormPage() {
        initComponents();
        
        headertitle.setHideOnEmpty(true);
        xActionBar1.setHideOnEmpty(true);
        xabFormActions.setHideOnEmpty(true);
        xabNavActions.setHideOnEmpty(true);
        headergroup.setLayout(new HeaderLayout());
        headertoolbar.removeAll();        
        headertoolbar.setLayout(new ToolbarLayout()); 
        headertoolbar.add(leftactionpanel, "LEFT");
        headertoolbar.add(rightactionpanel, "RIGHT");
        
        renderer = new NoteRenderer();
        xDropDownList1.setRenderer(renderer);
        xDropDownList1.setVisibility(new NoteVisibility(renderer)); 
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headergroup = new javax.swing.JPanel();
        headertitle = new com.rameses.rcp.control.XLabel();
        headertoolbar = new javax.swing.JPanel();
        leftactionpanel = new com.rameses.rcp.control.XHorizontalPanel();
        xabFormActions = new com.rameses.rcp.control.XActionBar();
        xActionBar1 = new com.rameses.rcp.control.XActionBar();
        xActionBar2 = new com.rameses.rcp.control.XActionBar();
        xSubFormPanel1 = new com.rameses.rcp.control.XSubFormPanel();
        rightactionpanel = new com.rameses.rcp.control.XHorizontalPanel();
        xabNavActions = new com.rameses.rcp.control.XActionBar();
        xDropDownList1 = new com.rameses.rcp.control.XDropDownList();
        stylerule = new com.rameses.rcp.control.XStyleRule();

        setLayout(new java.awt.BorderLayout());

        headergroup.setLayout(new java.awt.BorderLayout());

        headertitle.setBackground(new java.awt.Color(255, 255, 255));
        headertitle.setExpression("#{title}");
        headertitle.setFontStyle("font-size:16; font-weight:bold;");
        headertitle.setIconResource("#{icon}");
        headertitle.setOpaque(true);
        headertitle.setPadding(new java.awt.Insets(2, 7, 2, 5));
        headergroup.add(headertitle, java.awt.BorderLayout.NORTH);

        com.rameses.rcp.control.border.XEtchedBorder xEtchedBorder1 = new com.rameses.rcp.control.border.XEtchedBorder();
        xEtchedBorder1.setHideLeft(true);
        xEtchedBorder1.setHideRight(true);
        headertoolbar.setBorder(xEtchedBorder1);
        headertoolbar.setLayout(new java.awt.BorderLayout());

        leftactionpanel.setBorderSeparator(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        xabFormActions.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5));
        xabFormActions.setDepends(new String[] {"entity"});
        xabFormActions.setDynamic(true);
        xabFormActions.setFormName("formName");
        xabFormActions.setName("formActions"); // NOI18N
        leftactionpanel.add(xabFormActions);

        xActionBar1.setBorder(null);
        xActionBar1.setDepends(new String[] {"entity"});
        xActionBar1.setDynamic(true);
        xActionBar1.setFormName("entityName");
        leftactionpanel.add(xActionBar1);

        xActionBar2.setBorder(null);
        xActionBar2.setDepends(new String[] {"entity"});
        xActionBar2.setDynamic(true);
        xActionBar2.setFormName("entityName");
        xActionBar2.setName("extActions"); // NOI18N
        leftactionpanel.add(xActionBar2);

        xSubFormPanel1.setHandler("queryForm");
        xSubFormPanel1.setName("queryForm"); // NOI18N

        org.jdesktop.layout.GroupLayout xSubFormPanel1Layout = new org.jdesktop.layout.GroupLayout(xSubFormPanel1);
        xSubFormPanel1.setLayout(xSubFormPanel1Layout);
        xSubFormPanel1Layout.setHorizontalGroup(
            xSubFormPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 40, Short.MAX_VALUE)
        );
        xSubFormPanel1Layout.setVerticalGroup(
            xSubFormPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 25, Short.MAX_VALUE)
        );

        leftactionpanel.add(xSubFormPanel1);

        headertoolbar.add(leftactionpanel, java.awt.BorderLayout.WEST);

        rightactionpanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5));
        rightactionpanel.setShowLeftSeparator(true);

        xabNavActions.setBorder(null);
        xabNavActions.setDepends(new String[] {"entity"});
        xabNavActions.setFormName("formName");
        xabNavActions.setName("navActions"); // NOI18N
        xabNavActions.setShowCaptions(false);
        rightactionpanel.add(xabNavActions);

        xDropDownList1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/note.png"))); // NOI18N
        xDropDownList1.setContentAreaFilled(false);
        xDropDownList1.setFocusable(false);
        xDropDownList1.setHandler("messagelist");
        xDropDownList1.setHideOnEmptyResult(true);
        xDropDownList1.setMargin(new java.awt.Insets(0, 2, 0, 2));
        xDropDownList1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xDropDownList1ActionPerformed(evt);
            }
        });
        rightactionpanel.add(xDropDownList1);

        headertoolbar.add(rightactionpanel, java.awt.BorderLayout.EAST);

        headergroup.add(headertoolbar, java.awt.BorderLayout.SOUTH);

        add(headergroup, java.awt.BorderLayout.NORTH);

        stylerule.setName("styleRules"); // NOI18N
        add(stylerule, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void xDropDownList1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xDropDownList1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_xDropDownList1ActionPerformed
    
    // <editor-fold defaultstate="collapsed" desc=" HeaderLayout ">

    private class HeaderLayout implements LayoutManager, LayoutManager2 
    {
        public void addLayoutComponent(String name, Component comp) {}        
        public void removeLayoutComponent(Component comp) {}

        public Dimension preferredLayoutSize(Container parent) {
            return getLayoutSize(parent);
        }

        public Dimension minimumLayoutSize(Container parent) {
            return getLayoutSize(parent);
        }

        public void layoutContainer(Container parent) {
            layoutContainerImpl(parent);            
        }

        public void addLayoutComponent(Component comp, Object constraints) {}

        public Dimension maximumLayoutSize(Container target) {
            return getLayoutSize(target);
        }

        public float getLayoutAlignmentX(Container target) { 
            return 0.0f;
        }

        public float getLayoutAlignmentY(Container target) {
            return 0.0f;
        }

        public void invalidateLayout(Container target) {
            layoutContainerImpl(target);
        }
        
        private Dimension getLayoutSize(Container parent) {
            synchronized (parent.getTreeLock()) {
                int w=0, h=0;
                Component[] comps = parent.getComponents();
                for (int i=0; i<comps.length; i++) {
                    Component c = comps[i];
                    if (!c.isVisible()) continue;
                    
                    Dimension dim = c.getPreferredSize();
                    w = Math.max(dim.width, w);
                    h += dim.height;
                }
                if (w > 0 || h > 0) {
                    Insets margin = parent.getInsets();
                    w += (margin.left + margin.right);
                    h += (margin.top + margin.bottom);
                }
                return new Dimension(w, h);
            }
        }

        private void layoutContainerImpl(Container parent) {
            synchronized (parent.getTreeLock()) {
                Insets margin = parent.getInsets();
                int pwidth = parent.getWidth();
                int pheight = parent.getHeight();
                int x = margin.left;
                int y = margin.top;
                int w = pwidth - (margin.left + margin.right);
                Component[] comps = parent.getComponents();
                for (int i=0; i<comps.length; i++) {
                    Component c = comps[i];
                    if (!c.isVisible()) continue;
                    
                    Dimension dim = c.getPreferredSize();
                    c.setBounds(x, y, w, dim.height);
                    y += dim.height;
                }
            } 
        }
    }    

    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc=" ToolbarLayout ">

    private class ToolbarLayout implements LayoutManager, LayoutManager2 
    {
        private Component left;
        private Component right;
                
        public void addLayoutComponent(String name, Component comp) {
            synchronized (comp.getTreeLock()) {
                if ("LEFT".equals(name)) {
                    left = comp;
                } else if ("RIGHT".equals(name)) {
                    right = comp;
                }
            }
        }        
        public void removeLayoutComponent(Component comp) {
            synchronized (comp.getTreeLock()) {
                if (comp == left) {
                    left = null;
                } else if (comp == right) {
                    right = null;
                }
            } 
        }

        public Dimension preferredLayoutSize(Container parent) {
            return getLayoutSize(parent);
        }

        public Dimension minimumLayoutSize(Container parent) {
            return getLayoutSize(parent);
        }

        public void layoutContainer(Container parent) {
            layoutContainerImpl(parent);            
        }

        public void addLayoutComponent(Component comp, Object constraints) {
            synchronized (comp.getTreeLock()) {
                if ("LEFT".equals(constraints)) {
                    left = comp;
                } else if ("RIGHT".equals(constraints)) {
                    right = comp;
                }
            } 
        }

        public Dimension maximumLayoutSize(Container target) {
            return getLayoutSize(target);
        }

        public float getLayoutAlignmentX(Container target) { 
            return 0.0f;
        }

        public float getLayoutAlignmentY(Container target) {
            return 0.0f;
        }

        public void invalidateLayout(Container target) {
            layoutContainerImpl(target);
        }

        private Component[] resolveComponents() {
            Component[] comps = new Component[]{left, right};
            Component[] results = new Component[comps.length];            
            for (int i=0; i<comps.length; i++) {
                Component c = comps[i];
                if (c == null || !c.isVisible()) continue;
                if (c instanceof LayoutComponent) { 
                    LayoutComponent lc = (LayoutComponent)c; 
                    if (!lc.isVisibleInLayout()) continue;
                } 
                results[i] = c;
            } 
            return results;
        }
        
        private Dimension getLayoutSize(Container parent) {
            synchronized (parent.getTreeLock()) {
                int w=0, h=0;
                Component[] comps = resolveComponents();
                for (int i=0; i<comps.length; i++) {
                    Component c = comps[i];
                    if (c == null) continue;
                    
                    Dimension dim = c.getPreferredSize();
                    w += dim.width;
                    h = Math.max(dim.height, h);
                }
                if (w > 0 || h > 0) {
                    Insets margin = parent.getInsets();
                    w += (margin.left + margin.right);
                    h += (margin.top + margin.bottom);
                }
                return new Dimension(w, h);
            }
        }

        private void layoutContainerImpl(Container parent) {
            synchronized (parent.getTreeLock()) {
                Insets margin = parent.getInsets();
                int pwidth = parent.getWidth();
                int pheight = parent.getHeight();
                int x = margin.left;
                int y = margin.top;
                int w = pwidth - (margin.left + margin.right);
                int h = pheight - (margin.top + margin.bottom);
                Component[] comps = resolveComponents();
                if (comps[0] != null) {
                    //display left component
                    Dimension dim = comps[0].getPreferredSize();
                    comps[0].setBounds(x, y, dim.width, h);
                    x += dim.width;
                }
                if (comps[1] != null) {
                    //display right component
                    Dimension dim = comps[1].getPreferredSize();
                    int px = pwidth-margin.right-dim.width;
                    if (px > x) x = px;
                    
                    comps[1].setBounds(x, y, dim.width, h);
                } 
            } 
        }
    }    

    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc=" LayeredPanel ">

    @Override
    protected void addImpl(Component comp, Object constraints, int index) {
        if (constraints == null || BorderLayout.CENTER.equals(constraints)) {
            LayeredPanel layer = getLayeredPanel(); 
            if (layer.getParent() == null) {
                super.addImpl(layer, constraints, index); 
            } 
            layer.removeAll();
            layer.add(comp, new Integer(0)); 
            layer.layout.contentComp = comp; 
            layer.layout.overlayComp = renderer.getComponent();
            layer.add(layer.layout.overlayComp, new Integer(1)); 
        } else {
            super.addImpl(comp, constraints, index); 
        }
    }

    @Override
    public void remove(Component comp) {
        synchronized (getTreeLock()) { 
            getLayeredPanel().remove(comp); 
        }
        super.remove(comp);
    }
    
    private LayeredPanel layeredPanel;
    private LayeredPanel getLayeredPanel() {
        if (layeredPanel == null) {
            layeredPanel = new LayeredPanel();
        }
        return layeredPanel;
    }
    
    
    private class LayeredPanel extends JLayeredPane {
        
        LayeredLayout layout;
        JComponent overlay;
        
        LayeredPanel() {
            super();
            super.setLayout(layout=new LayeredLayout()); 
        }
        
        @Override
        public void setLayout(LayoutManager mgr) {
        }
    }
    
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc=" LayeredLayout ">
    
    private class LayeredLayout implements LayoutManager {

        public final static String CONTENT = "Content";
        public final static String OVERLAY = "Overlay";
        
        Component contentComp;
        Component overlayComp;
        
        @Override
        public void addLayoutComponent(String name, Component comp) {
        }

        @Override
        public void removeLayoutComponent(Component comp) {
            synchronized (comp.getTreeLock()) {
                if (comp == null) { return; } 
                
                if (comp == overlayComp) {
                    overlayComp = null; 
                } else if (comp == contentComp) {
                    contentComp = null; 
                } 
            } 
        }

        @Override
        public Dimension preferredLayoutSize(Container parent) {
            synchronized (parent.getTreeLock()) {
                Dimension dim = new Dimension(0, 0);
                if (contentComp != null && contentComp.isVisible()) {
                    Dimension d = contentComp.getPreferredSize();
                    dim.width += d.width;
                    dim.height = Math.max(d.height, dim.height);
                }
                
                Insets insets = parent.getInsets();
                dim.width += insets.left + insets.right;
                dim.height += insets.top + insets.bottom;
                return dim;
            }   
        }

        @Override
        public Dimension minimumLayoutSize(Container parent) {
            synchronized (parent.getTreeLock()) {
                Dimension dim = new Dimension(0, 0);
                if (contentComp != null && contentComp.isVisible()) {
                    Dimension d = contentComp.getMinimumSize();
                    dim.width += d.width;
                    dim.height = Math.max(d.height, dim.height);
                }
                
                Insets insets = parent.getInsets();
                dim.width += insets.left + insets.right;
                dim.height += insets.top + insets.bottom;
                return dim;
            }            
        }

        @Override
        public void layoutContainer(Container parent) {
            synchronized (parent.getTreeLock()) {
                Insets margin = parent.getInsets();
                int pw = parent.getWidth(), ph = parent.getHeight(); 
                int x = margin.left, y = margin.top;
                int w = pw - (margin.left + margin.right);
                int h = ph - (margin.top + margin.bottom); 
                if (contentComp != null && contentComp.isVisible()) {
                    contentComp.setSize(w, contentComp.getHeight());
                    Dimension d = contentComp.getPreferredSize();
                    contentComp.setBounds(x, y, w, h);
                }
                
                boolean b = (renderer == null? false: renderer.isVisible()); 
                if (overlayComp != null && b) {
                    int r = pw - margin.right - 5;
                    Dimension d = overlayComp.getPreferredSize(); 
                    overlayComp.setBounds(Math.max(r-d.width,0), y, d.width, d.height);
                }
            }
        }
    }
    
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc=" NoteRenderer ">
    
    private class NoteRenderer implements XDropDownList.Renderer {
        
        AbstractListDataProvider model;
        JScrollPane jsp;
        JEditorPane view;
        JPanel panel;
        boolean visible;
        
        NoteRenderer() {
            getComponent(); 
        }
        
        @Override
        public void setModel(AbstractListDataProvider model) {
            this.model = model; 
        }

        @Override
        public void refresh() {
            visible = false; 
            if (model != null) {
                visible = (model.getDataListSize() > 0);
            } 
            
            if (visible) {
                StringBuilder builder = new StringBuilder();
                builder.append("<html>"); 
                builder.append("<body>"); 
                int counter = 0;
                List list = model.getDataList(); 
                for (Object item : list) {
                    String text = xDropDownList1.getItemText(item); 
                    if (counter > 0) {
                        builder.append("<br/><hr/>"); 
                    }
                    builder.append("<p style=\"padding:0;\">"); 
                    builder.append(text); 
                    builder.append("</p>"); 
                    counter += 1;
                }
                builder.append("</body>"); 
                builder.append("</html>"); 
                view.setText(builder.toString()); 
                view.repaint(); 
            }
        }

        @Override
        public boolean isVisible() {
            return visible;
        }

        @Override
        public void setVisible(boolean visible) {
            this.visible = visible;
            
            getLayeredPanel().remove(getComponent()); 
            if (visible) { 
                int idx = getLayeredPanel().getComponentCount();
                getLayeredPanel().layout.overlayComp = getComponent(); 
                getLayeredPanel().add(getComponent(), new Integer(idx)); 
            } 
            getLayeredPanel().revalidate();
            getLayeredPanel().repaint();
        }
        
        Component getComponent() {
            if (panel == null) {
                Color bgcolor = new Color(254, 255, 208);
                view = new JEditorPane();
                view.setFocusable(false);
                view.setContentType("text/html");
                view.setEditable(false); 
                view.setBackground(bgcolor); 
                view.setBorder(BorderFactory.createEmptyBorder(0,5,0,3));
                
                jsp = new JScrollPane(view); 
                jsp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
                jsp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED); 
                jsp.setBorder(BorderFactory.createEmptyBorder());
                
                panel = new JPanel() {
                    
//                    @Override
//                    public Insets getInsets() {
//                        Insets ins = super.getInsets();
//                        if (ins == null) ins = new Insets(0,0,0,0);
//                        
//                        ins.top += 1;
//                        ins.left += 1;
//                        ins.bottom += 1;
//                        ins.right += 1;
//                        return ins; 
//                    }
                    
                    @Override
                    public void paint(Graphics g) {
                        super.paint(g); 
                        Graphics g2 = g.create();
                        g2.setColor(Color.decode("#cfcfcf"));  
                        //g2.drawRect(0, 0, getWidth()-1, getHeight()-1); 
                        //g2.setColor(Color.decode("#a0a0a0"));  
                        //g2.drawRect(1, 1, getWidth()-2, getHeight()-2); 
                        g2.dispose();
                    }
                };
                panel.setPreferredSize(new Dimension(250, 250)); 
                panel.setLayout(new BorderLayout());
                panel.setBorder(BorderFactory.createLineBorder(Color.decode("#afafaf"))); 
                panel.setOpaque(false); 
                panel.add(jsp); 
                
                HTMLEditorKit kit = (HTMLEditorKit)view.getEditorKit();
                kit.getStyleSheet().addRule("P {margin:3; }"); 
                
            }
            return panel; 
        }
    } 
    
    private class NoteVisibility implements UIVisibility {

        private NoteRenderer renderer; 
        
        NoteVisibility(NoteRenderer renderer) {
            this.renderer = renderer; 
        }
        
        @Override
        public boolean isVisible() {
            AbstractListDataProvider model = renderer.model;
            if (model == null) { return false; } 
            
            return (model.getDataListSize() > 0); 
        }
    }
    
    // </editor-fold>
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel headergroup;
    private com.rameses.rcp.control.XLabel headertitle;
    private javax.swing.JPanel headertoolbar;
    private com.rameses.rcp.control.XHorizontalPanel leftactionpanel;
    private com.rameses.rcp.control.XHorizontalPanel rightactionpanel;
    private com.rameses.rcp.control.XStyleRule stylerule;
    private com.rameses.rcp.control.XActionBar xActionBar1;
    private com.rameses.rcp.control.XActionBar xActionBar2;
    private com.rameses.rcp.control.XDropDownList xDropDownList1;
    private com.rameses.rcp.control.XSubFormPanel xSubFormPanel1;
    private com.rameses.rcp.control.XActionBar xabFormActions;
    private com.rameses.rcp.control.XActionBar xabNavActions;
    // End of variables declaration//GEN-END:variables
    
}
